import pygame, sys, random
from pygame import *
from pygame import mixer
pygame.init()
mixer.init()
window=pygame.display.set_mode((1500, 800), pygame.FULLSCREEN)
winrect=window.get_rect()

R=(255, 0, 0)
G=(19, 225, 30)
B=(41, 2, 245)
Y=(251, 240, 32)
W=(255, 255, 255)
BLACK=(0, 0, 0)

bg = pygame.image.load('bg.jpg')
audio = mixer.Sound('Chill.ogg')
audio.play(-1)
#Шрифты, текст, все дела
bigfont=pygame.font.SysFont('ponter', 75)
font=pygame.font.SysFont('ponter', 40)
texts={}

so=bigfont.render('BallKeeper', True, Y)
rect=so.get_rect()
rect.top=winrect.top+100
rect.centerx=winrect.centerx
texts['title']=[so, rect]


so=font.render('Start', True, B)
rect=so.get_rect()
so1=pygame.Surface((400, 50))
so2=pygame.Surface((400, 50))
rect1=so1.get_rect()
so1.fill(Y)
so2.fill(R)
pygame.draw.rect(so1, BLACK, rect1, 5)
pygame.draw.rect(so2, BLACK, rect1, 5)
rect.center=rect1.center
so1.blit(so, rect)
so2.blit(so, rect)
rect1.centerx=winrect.centerx
rect1.top=texts['title'][1].top+300
texts['start']=[so1, rect1, so2]

so=bigfont.render('Levels', True, B)
rect=so.get_rect()
rect.centerx=winrect.centerx
rect.top=winrect.top+100
texts['levels']=[so, rect]

#состояние уровней
levels=[]
lock=pygame.image.load('j_000.png').convert()
lock=pygame.transform.scale(lock, (100, 100))
lock.set_colorkey(lock.get_at((1, 1)))
for i in range(1, 21):
    so=pygame.Surface((100, 100))
    so.fill(Y)
    rect=so.get_rect()
    pygame.draw.rect(so, BLACK, rect, 5)
    so1=pygame.Surface((100, 100))
    so1.fill(R)
    pygame.draw.rect(so1, BLACK, rect, 5)
    text=font.render(str(i), True, B)
    textrect=text.get_rect()
    textrect.center=rect.center
    so.blit(text, textrect)
    so1.blit(text, textrect)
    locked=pygame.Surface((100, 100))
    locked.blit(so, rect)
    locked.blit(lock, lock.get_rect())
    if i<=5:
        rect.top=texts['levels'][1].bottom+25
    elif i<=10:
        rect.top=levels[0][3].bottom+50
    elif i<=15:
        rect.top=levels[7][3].bottom+50
    else:
        rect.top=levels[12][3].bottom+50
    if i==1 or i==6 or i==11 or i==16:
        rect.right=winrect.centerx-200
    elif i==2 or i==7 or i==12 or i==17:
        rect.right=winrect.centerx-75
    elif i==3 or i==8 or i==13 or i==18:
        rect.centerx=winrect.centerx
    elif i==4 or i==9 or i==14 or i==19:
        rect.left=winrect.centerx+75
    else:
        rect.left=winrect.centerx+200
    if i==1:
        levels.append([locked, so, so1, rect, 1])
    else:
        levels.append([locked, so, so1, rect, 1])

#Классы стен
class cwall(pygame.Rect):
    'orientation (hor, vert), location, holesize, winrect'
    def __init__(self, orientation, location, holesize, winrect):
        self.orientation=orientation
        if orientation==0:
            self.height=5
            self.width=winrect.width
            self.centery=location
        if orientation==1:
            self.width=5
            self.height=winrect.height
            self.centerx=location
        self.holesize=holesize
        self.bbottomright=round(pygame.mouse.get_pos()[self.orientation]+self.holesize/2)
        self.ttopleft=round(pygame.mouse.get_pos()[self.orientation]-self.holesize/2)
    def update(self):
        self.bbottomright=round(pygame.mouse.get_pos()[self.orientation]+self.holesize/2)
        self.ttopleft=round(pygame.mouse.get_pos()[self.orientation]-self.holesize/2)
        if self.bbottomright<self.holesize:
            self.bbottomright=self.holesize
        if self.ttopleft>self.right-self.holesize and self.orientation==0:
            self.ttopleft=self.right-self.holesize
        if self.ttopleft>self.bottom-self.holesize and self.orientation==1:
            self.ttopleft=self.bottom-self.holesize

#Шары(жесть)
class cball(pygame.Rect):
    'diameter, speed, color, winrect'
    def __init__(self, diameter, speed, color, winrect):
        self.width=diameter
        self.height=diameter
        self.speed=speed
        self.color=color
        self.direction=random.randint(1, 4)
        self.center=(random.randint(round(diameter/2), round(winrect.right-diameter/2)), random.randint(round(diameter/2), round(winrect.bottom-diameter/2)))
    def update(self, winrect, walls):
        if self.direction/2==round(self.direction/2):
            self.right+=self.speed
        else:
            self.right-=self.speed
        if self.direction<=2:
            self.top+=self.speed
        else:
            self.top-=self.speed
        for wall in walls:
            if wall.collidepoint(self.center):
                if wall.orientation==0 and (self.centerx<wall.ttopleft or self.centerx>wall.bbottomright):
                    if self.direction==1:
                        self.direction=3
                        self.bottom=wall.top
                    elif self.direction==2:
                        self.direction=4
                        self.bottom=wall.top
                    elif self.direction==3:
                        self.direction=1
                        self.top=wall.bottom
                    else:
                        self.direction=2
                        self.top=wall.bottom
                elif wall.orientation==1 and (self.centery<wall.ttopleft or self.centery>wall.bbottomright):
                    if self.direction==1:
                        self.direction=2
                        self.left=wall.right
                    elif self.direction==2:
                        self.direction=1
                        self.right=wall.left
                    elif self.direction==3:
                        self.direction=4
                        self.left=wall.right
                    else:
                        self.direction=3
                        self.right=wall.left
            elif wall.orientation==0:
                if self.bottom>wall.top and self.centery<wall.top and (self.centerx<wall.ttopleft or self.centerx>wall.bbottomright):
                    if self.direction==1:
                        self.direction=3
                        self.bottom=wall.top
                    elif self.direction==2:
                        self.direction=4
                        self.bottom=wall.top
                elif self.top<wall.bottom and self.centery>wall.bottom and (self.centerx<wall.ttopleft or self.centerx>wall.bbottomright):
                    if self.direction==3:
                        self.direction=1
                        self.top=wall.bottom
                    if self.direction==4:
                        self.direction=2
                        self.top=wall.bottom
            else:
                if self.left<wall.right and self.centerx>wall.right and (self.centery<wall.ttopleft or self.centery>wall.bbottomright):
                    if self.direction==1:
                        self.direction=2
                        self.left=wall.right
                    elif self.direction==3:
                        self.direction=4
                        self.left=wall.right
                elif self.right>wall.left and self.centerx<wall.left and (self.centery<wall.ttopleft or self.centery>wall.bbottomright):
                    if self.direction==2:
                        self.direction=1
                        self.right=wall.left
                    if self.direction==4:
                        self.direction=3
                        self.right=wall.left
        if self.top<0:
            if self.direction==3:
                self.direction=1
                self.top=0
            elif self.direction==4:
                self.direction=2
                self.topn=0
        if self.bottom>winrect.bottom:
            if self.direction==1:
                self.direction=3
                self.bottom=winrect.bottom
            elif self.direction==2:
                self.direction=4
                self.bottom=winrect.bottom
        if self.left<0:
            if self.direction==1:
                self.direction=2
                self.left=0
            elif self.direction==3:
                self.direction=4
                self.left=0
        if self.right>winrect.right:
            if self.direction==2:
                self.direction=1
                self.right=winrect.right
            if self.direction==4:
                self.direction=3
                self.right=winrect.right
        for box in boxes:
            if box[0].collidepoint(self.center) and self.color==box[1]:
                return True
        return False


mode='title'

#Основа основ
while True:
    if mode=='title':
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type==pygame.MOUSEBUTTONDOWN:
                if texts['start'][1].collidepoint(event.pos):
                    mode='levels'
            if event.type==pygame.KEYDOWN:
                if event.key==pygame.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
        #Окошко
        window.fill(B)
        mouse=pygame.mouse.get_pos()
        if texts['start'][1].collidepoint(mouse):
            window.blit(texts['start'][2], texts['start'][1])
        else:
            window.blit(texts['start'][0], texts['start'][1])
        window.blit(texts['title'][0], texts['title'][1])
        pygame.display.update()

    elif mode=='levels':

        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type==pygame.MOUSEBUTTONDOWN:
                for level in levels:
                    if level[3].collidepoint(event.pos) and level[4]!=0:
                        mode='loading'
                        loadinglevel=levels.index(level)+1
            if event.type==pygame.KEYDOWN:
                if event.key==pygame.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
        #Экран
        window.fill(G)
        for level in levels:
            if level[3].collidepoint(pygame.mouse.get_pos()) and level[4]==1:
                window.blit(level[2], level[3])
            else:
                window.blit(level[level[4]], level[3])
        window.blit(texts['levels'][0], texts['levels'][1])
        pygame.display.update()
#Уровни(Всего - 8, в шестом другая мини игра)
    elif mode=='loading':
        if loadinglevel==1:
            walls=[cwall(1, winrect.width/2, 100, winrect)]
            balls=[]
            for i in range(2):
                balls.append(cball(20, 3, G, winrect))
            for i in range(2):
                balls.append(cball(20, 3, Y, winrect))
            boxes=((pygame.Rect(0, 0, round(winrect.width/2), winrect.height), G), (pygame.Rect(round(winrect.width/2), 0, round(winrect.width/2), winrect.height), Y))
        elif loadinglevel==2:
            walls=[cwall(1, winrect.width/2, 100, winrect)]
            balls=[]
            for i in range(4):
                balls.append(cball(20, 3, G, winrect))
            for i in range(4):
                balls.append(cball(20, 3, Y, winrect))
            boxes=((pygame.Rect(0, 0, round(winrect.width/2), winrect.height), G), (pygame.Rect(round(winrect.width/2), 0, round(winrect.width/2), winrect.height), Y))
        elif loadinglevel==3:
            walls=[cwall(1, winrect.width/3, 100, winrect), cwall(1, 2*winrect.width/3, 100, winrect)]
            balls=[]
            for i in range(2):
                balls.append(cball(20, 3, G, winrect))
            for i in range(2):
                balls.append(cball(20, 3, Y, winrect))
            for i in range(2):
                balls.append(cball(20, 3, B, winrect))
            boxes=((pygame.Rect(0, 0, round(winrect.width/3), winrect.height), G), (pygame.Rect(round(winrect.width/3), 0, round(winrect.width/3), winrect.height), Y),
                   (pygame.Rect(round(2*winrect.width/3), 0, round(winrect.width/3), winrect.height), B))
        elif loadinglevel==4:
            walls=[cwall(1, winrect.width/3, 100, winrect), cwall(1, 2*winrect.width/3, 100, winrect)]
            balls=[]
            for i in range(4):
                balls.append(cball(20, 3, G, winrect))
            for i in range(4):
                balls.append(cball(20, 3, Y, winrect))
            for i in range(4):
                balls.append(cball(20, 3, B, winrect))
            boxes=((pygame.Rect(0, 0, round(winrect.width/3), winrect.height), G), (pygame.Rect(round(winrect.width/3), 0, round(winrect.width/3), winrect.height), Y),
                   (pygame.Rect(round(2*winrect.width/3), 0, round(winrect.width/3), winrect.height), B))

        elif loadinglevel==7:
            walls=[cwall(1, winrect.width/2, 100, winrect), cwall(0, winrect.height/2, 100, winrect)]
            balls=[]
            for i in range(2):
                balls.append(cball(20, 3, G, winrect))
            for i in range(2):
                balls.append(cball(20, 3, Y, winrect))
            for i in range(2):
                balls.append(cball(20, 3, B, winrect))
            for i in range(2):
                balls.append(cball(20, 3, R, winrect))
            boxes=((pygame.Rect(0, 0, round(winrect.width/2), round(winrect.height/2)), G),
                   (pygame.Rect(0, round(winrect.height/2), round(winrect.width/2), round(winrect.height/2)), R),
                   (pygame.Rect(round(winrect.width/2), 0, round(winrect.width/2), round(winrect.height/2)), Y),
                   (pygame.Rect(round(winrect.width/2), round(winrect.height/2),  round(winrect.width/2), round(winrect.height/2)), B))
        elif loadinglevel==8:
            walls=[cwall(1, winrect.width/2, 100, winrect), cwall(0, winrect.height/2, 100, winrect)]
            balls=[]
            for i in range(4):
                balls.append(cball(20, 3, G, winrect))
            for i in range(4):
                balls.append(cball(20, 3, Y, winrect))
            for i in range(4):
                balls.append(cball(20, 3, B, winrect))
            for i in range(4):
                balls.append(cball(20, 3, R, winrect))
            boxes=((pygame.Rect(0, 0, round(winrect.width/2), round(winrect.height/2)), G),
                   (pygame.Rect(0, round(winrect.height/2), round(winrect.width/2), round(winrect.height/2)), R),
                   (pygame.Rect(round(winrect.width/2), 0, round(winrect.width/2), round(winrect.height/2)), Y),
                   (pygame.Rect(round(winrect.width/2), round(winrect.height/2),  round(winrect.width/2), round(winrect.height/2)), B))
        elif loadinglevel==5:
            walls=[cwall(1, winrect.width/2, 100, winrect), cwall(0, winrect.height/2, 100, winrect)]
            balls=[]
            for i in range(10):
                balls.append(cball(20, 3, R, winrect))
            boxes=((pygame.Rect(0, 0, round(winrect.width/2), round(winrect.height/2)), R),
                   (pygame.Rect(0, round(winrect.height/2), winrect.width, round(winrect.height/2)), W),
                   (pygame.Rect(round(winrect.width/2), 0, round(winrect.width/2), winrect.height), W))
        #elif loadinglevel==9:

        elif loadinglevel==6:
            #walls=[cwall(1, winrect.width/2, 100, winrect), cwall(0, winrect.height/2, 100, winrect)]
            #balls=[]
            #for i in range(20):
                #balls.append(cball(20, 3, R, winrect))
            #boxes=((pygame.Rect(0, 0, round(winrect.width/2), round(winrect.height/2)), R),
                   #(pygame.Rect(0, round(winrect.height/2), winrect.width, round(winrect.height/2)), W),
                   #(pygame.Rect(round(winrect.width/2), 0, round(winrect.width/2), winrect.height), W))
            def Intersect(x1, x2, y1, y2, db1, db2):
                if (x1 > x2 - db1) and (x1 < x2 + db2) and (y1 > y2 - db1) and (y1 < y2 + db2):
                    return 1
                else:
                    return 0
            window = pygame.display.set_mode((1920, 1080))
            pygame.display.set_caption('Easter Egg')
            screen = pygame.Surface((800, 640))
            info = pygame.Surface((800, 30))

            class Sprite:
                def __init__(self, xpos, ypos, filename):
                    self.x = xpos
                    self.y = ypos
                    self.bitmap = pygame.image.load(filename)
                    self.bitmap.set_colorkey((0,0,0))
                def render(self):
                    screen.blit(self.bitmap,(self.x,self.y))

            class Menu:
                def __init__(self, punkts = [400, 350, u'Punkt', (250,250,30), (250,30,250)]):
                    self.punkts = punkts
                def render(self, poverhnost, font, num_punkt):
                    for i in self.punkts:
                        if num_punkt == i[5]:
                            poverhnost.blit(font.render(i[2], 1, i[4]), (i[0], i[1]-30))
                        else:
                            poverhnost.blit(font.render(i[2], 1, i[3]), (i[0], i[1]-30))
                def menu(self):
                    done = True
                    font_menu = pygame.font.Font(None, 50)
                    pygame.key.set_repeat(0,0)
                    pygame.mouse.set_visible(True)
                    punkt = 0
                    while done:
                        info.fill((0, 100, 200))
                        screen.fill((0, 100, 200))

                        mp = pygame.mouse.get_pos()
                        for i in self.punkts:
                            if mp[0]>i[0] and mp[0]<i[0]+155 and mp[1]>i[1] and mp[1]<i[1]+50:
                                punkt =i[5]
                        self.render(screen, font_menu, punkt)
                        for e in pygame.event.get():
                            if e.type == pygame.QUIT:
                                sys.exit()
                            if e.type == pygame.KEYDOWN:
                                if e.key == pygame.K_ESCAPE:
                                   sys.exit()
                                if e.key == pygame.K_UP:
                                    if punkt > 0:
                                       punkt -= 1
                                if e.key == pygame.K_DOWN:
                                    if punkt < len(self.punkts)-1:
                                       punkt += 1
                            if e.type == pygame.MOUSEBUTTONDOWN and e.button == 1:
                                if punkt == 0:
                                    done = False
                                elif punkt == 1:
                                    exit()
                        window.blit(info, (0, 0))
                        window.blit(screen, (0, 30))
                        pygame.display.flip()


            hero = Sprite(400,600,'j_000.png')
            meta = Sprite(300,0,'j_000.png')
            arrow = Sprite(-100,600,'j_000.png')

            meta.move = True
            hero.move_right = True
            hero.move_down = True
            arrow.push = False
            meta.speed = 0
            arrow.speed = 0.5
            score = 0
            lifes = 3

            #СНова текст!!!11111
            pygame.font.init()
            score_f = pygame.font.SysFont('ponter', 32)
            lifes_f = pygame.font.SysFont('ponter', 32)
            end = pygame.font.SysFont('Times new roman', 80)
            again = pygame.font.SysFont('Times new roman', 40)

            punkts = [(350, 300, u'Play', (11, 0, 77), (250,250,30), 0),
                      (350, 340, u'Exit', (11, 0, 77), (250,250,30), 1)]
            game = Menu(punkts)
            game.menu()

            done = True
            pygame.key.set_repeat(1, 1)
            while done:
                for e in pygame.event.get():
                    if e.type == pygame.QUIT:
                        done = False
                    if e.type == pygame.KEYDOWN:
                        if e.key == pygame.K_ESCAPE:
                            game.menu()

                    if e.type == pygame.MOUSEMOTION:
                        pygame.mouse.set_visible(False)
                        p = pygame.mouse.get_pos()
                        if p[0] > 0 and p[0] < 760:
                            hero.x = p[0]
                        if p[1] < 600 and p[1] > 200:
                            hero.y = p[1]
                    if e.type == pygame.MOUSEBUTTONDOWN:
                        if e.button == 1:
                            if arrow.push == False:
                                arrow.x = hero.x + 4
                                arrow.y = hero.y
                                arrow.push = True


                y = -300
                x = -200

                if meta.move == True:
                    meta.x += meta.speed
                    if meta.x > 760:
                        meta.move = False
                else:
                    meta.x -= meta.speed
                    if meta.x < -10:
                        meta.move = True

                if arrow.y < 0:
                    arrow.push = False
                    lifes -= 1
                if arrow.push == False:
                    arrow.x = -100
                    arrow.y = 600
                else:
                    arrow.y -= arrow.speed

                if Intersect(arrow.x, meta.x, arrow.y, meta.y, 5, 40) == True:
                     arrow.push = False
                     meta.speed += 0.2
                     arrow.speed += 0.2
                     score += 1
                if lifes <= 0:
                    y = 300
                    x = 450
                    if e.type == pygame.KEYDOWN:
                        if e.key == pygame.K_SPACE:
                            lifes = 3
                            score = 0
                            meta.speed = 0
                        else:
                            exit()





                screen.fill((50, 50, 50))
                info.fill((45,80,45))

                arrow.render()
                meta.render()
                hero.render()


                screen.blit(end.render ('Game Over', 1, (210, 120, 200)), (200, y))
                screen.blit(again.render ('Try again?(press Space)', 1, (210, 120, 200)), (200,x))
                info.blit(lifes_f.render ('Lifes: ' +str(lifes), 1, (210, 120, 200)), (600, 0))
                info.blit(score_f.render ('Score: ' +str(score), 1, (210, 120, 200)), (5, 0))
                window.blit(info, (0,0))
                window.blit(screen, (0, 30))
                pygame.display.flip()
                pygame.time.delay(5)



            window = pygame.display.set_mode((800, 670))
            pygame.display.set_caption('Archer')
            screen = pygame.Surface((800, 640))
            info = pygame.Surface((800, 30))

            class Sprite:
                def __init__(self, xpos, ypos, filename):
                    self.x = xpos
                    self.y = ypos
                    self.bitmap = pygame.image.load(filename)
                    self.bitmap.set_colorkey((0,0,0))
                def render(self):
                    screen.blit(self.bitmap,(self.x,self.y))

            class Menu:
                def __init__(self, punkts = [400, 350, u'Punkt', (250,250,30), (250,30,250)]):
                    self.punkts = punkts
                def render(self, poverhnost, font, num_punkt):
                    for i in self.punkts:
                        if num_punkt == i[5]:
                            poverhnost.blit(font.render(i[2], 1, i[4]), (i[0], i[1]-30))
                        else:
                            poverhnost.blit(font.render(i[2], 1, i[3]), (i[0], i[1]-30))
                def menu(self):
                    done = True
                    font_menu = pygame.font.Font(None, 50)
                    pygame.key.set_repeat(0,0)
                    pygame.mouse.set_visible(True)
                    punkt = 0
                    while done:
                        info.fill((0, 100, 200))
                        screen.fill((0, 100, 200))

                        mp = pygame.mouse.get_pos()
                        for i in self.punkts:
                            if mp[0]>i[0] and mp[0]<i[0]+155 and mp[1]>i[1] and mp[1]<i[1]+50:
                                punkt =i[5]
                        self.render(screen, font_menu, punkt)
                        for e in pygame.event.get():
                            if e.type == pygame.QUIT:
                                sys.exit()
                            if e.type == pygame.KEYDOWN:
                                if e.key == pygame.K_ESCAPE:
                                   sys.exit()
                                if e.key == pygame.K_UP:
                                    if punkt > 0:
                                       punkt -= 1
                                if e.key == pygame.K_DOWN:
                                    if punkt < len(self.punkts)-1:
                                       punkt += 1
                            if e.type == pygame.MOUSEBUTTONDOWN and e.button == 1:
                                if punkt == 0:
                                    done = False
                                elif punkt == 1:
                                    exit()
                        window.blit(info, (0, 0))
                        window.blit(screen, (0, 30))
                        pygame.display.flip()


            hero = Sprite(400,600,'j_000.png')
            meta = Sprite(300,0,'j_000.png')
            arrow = Sprite(-100,600,'j_000.png')

            meta.move = True
            hero.move_right = True
            hero.move_down = True
            arrow.push = False
            meta.speed = 0
            arrow.speed = 0.5
            score = 0
            lifes = 3

            pygame.font.init()
            score_f = pygame.font.SysFont('Arial', 32)
            lifes_f = pygame.font.SysFont('Arial', 32)
            end = pygame.font.SysFont('Times new roman', 80)
            again = pygame.font.SysFont('Times new roman', 40)

            punkts = [(350, 300, u'Play', (11, 0, 77), (250,250,30), 0),
                      (350, 340, u'Exit', (11, 0, 77), (250,250,30), 1)]
            game = Menu(punkts)
            game.menu()

            done = True
            pygame.key.set_repeat(1, 1)
            while done:
                for e in pygame.event.get():
                    if e.type == pygame.QUIT:
                        done = False
                    if e.type == pygame.KEYDOWN:
                        if e.key == pygame.K_ESCAPE:
                            game.menu()

                    if e.type == pygame.MOUSEMOTION:
                        pygame.mouse.set_visible(False)
                        p = pygame.mouse.get_pos()
                        if p[0] > 0 and p[0] < 760:
                            hero.x = p[0]
                        if p[1] < 600 and p[1] > 200:
                            hero.y = p[1]
                    if e.type == pygame.MOUSEBUTTONDOWN:
                        if e.button == 1:
                            if arrow.push == False:
                                arrow.x = hero.x + 4
                                arrow.y = hero.y
                                arrow.push = True


                y = -300
                x = -200

                if meta.move == True:
                    meta.x += meta.speed
                    if meta.x > 760:
                        meta.move = False
                else:
                    meta.x -= meta.speed
                    if meta.x < -10:
                        meta.move = True

                if arrow.y < 0:
                    arrow.push = False
                    lifes -= 1
                if arrow.push == False:
                    arrow.x = -100
                    arrow.y = 600
                else:
                    arrow.y -= arrow.speed

                if Intersect(arrow.x, meta.x, arrow.y, meta.y, 5, 40) == True:
                     arrow.push = False
                     meta.speed += 0.2
                     arrow.speed += 0.2
                     score += 1
                if lifes <= 0:
                    y = 300
                    x = 450
                    if e.type == pygame.KEYDOWN:
                        if e.key == pygame.K_SPACE:
                            lifes = 3
                            score = 0
                            meta.speed = 0
                        else:
                            exit()





                screen.fill((50, 50, 50))
                info.fill((45,80,45))

                arrow.render()
                meta.render()
                hero.render()


                screen.blit(end.render ('Game Over', 1, (210, 120, 200)), (200, y))
                screen.blit(again.render ('Try again?(press Space)', 1, (210, 120, 200)), (200,x))
                info.blit(lifes_f.render ('Lifes: ' +str(lifes), 1, (210, 120, 200)), (600, 0))
                info.blit(score_f.render ('Score: ' +str(score), 1, (210, 120, 200)), (5, 0))
                window.blit(info, (0,0))
                window.blit(screen, (0, 30))
                pygame.display.flip()
                pygame.time.delay(5)
        mode='playing'
    elif mode=='playing':
        while True:
            #event loop
            for event in pygame.event.get():
                if event.type==pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type==pygame.KEYDOWN:
                    if event.key==pygame.K_ESCAPE:
                        pygame.quit()
                        sys.exit()

            updates=[]
            for wall in walls:
                wall.update()
            for ball in balls:
                updates.append(ball.update(winrect, walls))
            #Победа
            won=True
            for update in updates:
                if not update:
                    won=False
                    break
            if won:
                if levels[loadinglevel][4]==0:
                    levels[loadinglevel][4]=1
                levels[loadinglevel-1][4]=2
                mode='levels'
                break
            #Юзаем blit
            window.fill(W)
            for box in boxes:
                pygame.draw.rect(window, box[1], box[0])
            for wall in walls:
                if wall.orientation==0:
                    pygame.draw.rect(window, BLACK, (wall.left, wall.top, wall.ttopleft, wall.height))
                    pygame.draw.rect(window, BLACK, (wall.bbottomright, wall.top, wall.right-wall.bbottomright, wall.height))
                else:
                    pygame.draw.rect(window, BLACK, (wall.left, wall.top, wall.width, wall.ttopleft))
                    pygame.draw.rect(window, BLACK, (wall.left, wall.bbottomright, wall.width, wall.bottom-wall.holesize))
            for ball in balls:
                pygame.draw.circle(window, ball.color, ball.center, round(ball.width/2))
                pygame.draw.circle(window, BLACK, ball.center, round(ball.width/2), 2)
            pygame.display.update()
            pygame.time.Clock().tick(100)
